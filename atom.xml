<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vex</title>
  
  <subtitle>春风十里，不如你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-01T13:15:13.363Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>vex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java向上转型与向下转型(初学者误区)[转]</title>
    <link href="http://yoursite.com/2018/08/01/Java%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E4%B8%8E%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B(%E5%88%9D%E5%AD%A6%E8%80%85%E8%AF%AF%E5%8C%BA)/"/>
    <id>http://yoursite.com/2018/08/01/Java向上转型与向下转型(初学者误区)/</id>
    <published>2018-07-31T16:00:00.000Z</published>
    <updated>2018-08-01T13:15:13.363Z</updated>
    
    <content type="html"><![CDATA[<p>​    在java中强制类型转换分为基本数据类型和引用数据类型两种,这里我们讨论的后者,也就是引用数据类型的强制类型转换。在Java中由于继承和向上转型,子类可以非常自然地转换成父类,但是父类转换成子类则需要强制转换。因为子类拥有比父类更多的属性、更强的功能,所以父类转换为子类需要强制。那么,是不是只要是父类转换为子类就会成功呢?其实不然,他们之间的强制类型转换是有条件的。 </p><p>​    当我们用一个类型的构造器构造出一个对象时,这个对象的类型就已经确定的,也就说它的本质是不会再发生变化了。在Java中我们可以通过继承、向上转型的关系使用父类类型来引用它,这个时候我们是使用功能较弱的类型引用功能较强的对象,这是可行的。但是将功能较弱的类型强制转功能较强的对象时,就不一定可以行了。  举个例子来说明。比如系统中存在Father、Son两个对象。首先我们先构造一个Son对象,然后用一个Father类型变量引用它:  Father father = new Son();  在这里Son 对象实例被向上转型为father了,但是请注意这个Son对象实例在内存中的本质还是Son类型的,只不过它的能力临时被消弱了而已,如果我们想变强怎么办?将其对象类型还原!  Son son = (Son)father;  这条语句是可行的,其实father引用仍然是Father类型的,只不过是将它的能力加强了,将其加强后转交给son引用了,Son对象实例在son的变量的引用下,恢复真身,可以使用全部功能了。  前面提到父类强制转换成子类并不是总是成功,那么在什么情况下它会失效呢?  当引用类型的真实身份是父类本身的类型时,强制类型转换就会产生错误。例如:  Father father = newFather();  Son son = (Son) father;  这个系统会抛出ClassCastException异常信息。  所以编译器在编译时只会检查类型之间是否存在继承关系,有则通过;而在运行时就会检查它的真实类型,是则通过,否则抛出ClassCastException异常。  所以在继承中,子类可以自动转型为父类,但是父类强制转换为子类时只有当引用类型真正的身份为子类时才会强制转换成功,否则失败。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    在java中强制类型转换分为基本数据类型和引用数据类型两种,这里我们讨论的后者,也就是引用数据类型的强制类型转换。在Java中由于继承和向上转型,子类可以非常自然地转换成父类,但是父类转换成子类则需要强制转换。因为子类拥有比父类更多的属性、更强的功能,所以父类转换
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo迁移风波</title>
    <link href="http://yoursite.com/2018/07/31/Hexo%E8%BF%81%E7%A7%BB%E9%A3%8E%E6%B3%A2/"/>
    <id>http://yoursite.com/2018/07/31/Hexo迁移风波/</id>
    <published>2018-07-30T16:00:00.000Z</published>
    <updated>2018-07-31T16:04:51.415Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：之前借助hexo模板搭建了blog，而最近因工作需要，换了新的电脑，才发现使用hexo维护博客极其不方便。想提交博客却只能在下班后在家中电脑上操作，这让我倍感8小时work time的效率出了问题。因为，我觉得，<strong>生活嘛，一定需要紧致感才够过瘾</strong>。</p></blockquote><ul><li><strong>主要解决思路：建立git分支，然后利用新分支管理自己博客的hexo源文件</strong></li></ul><h4 id="1-对username-github-io仓库新建blog分支，并克隆"><a href="#1-对username-github-io仓库新建blog分支，并克隆" class="headerlink" title="1. 对username.github.io仓库新建blog分支，并克隆"></a>1. 对username.github.io仓库新建blog分支，并克隆</h4><p>​    在<code>username.github.io</code>仓库上创建一个新分支blog，并切换到该分支下。然后，修改<code>setting</code> -&gt; <code>branches</code> - &gt; <code>default branch</code> 中的默认分支为blog，<code>update</code> 更新保存操作。通过<code>git clone</code> 命令克隆到本地，进入<code>username.github.io</code> 目录。</p><p><img src="D:\docs\md\imgs\blog1.PNG" alt="blog1"></p><p><img src="D:\docs\md\imgs\blog2.PNG" alt="blog2"></p><h4 id="2-将本体hexo-源文件拷贝到-username-github-io文件目录中"><a href="#2-将本体hexo-源文件拷贝到-username-github-io文件目录中" class="headerlink" title="2. 将本体hexo 源文件拷贝到 username.github.io文件目录中"></a>2. 将本体hexo 源文件拷贝到 <code>username.github.io</code>文件目录中</h4><p>​    将源电脑中hexo 源文件全部复制拷贝到 <code>username.github.io</code> 文件目录下后，将此目录通过git提交到新建立的blog分支上。提交前需注意：<strong>将themes目录下的各个主题目录中的 .git 目录删除（如果有），因为一个git 仓库不能包含另一个主题仓库，否则会提交失败</strong>。</p><h4 id="3-切换到新的工作电脑中进行如下操作"><a href="#3-切换到新的工作电脑中进行如下操作" class="headerlink" title="3. 切换到新的工作电脑中进行如下操作"></a>3. 切换到新的工作电脑中进行如下操作</h4><ul><li>将新电脑中添加ssh key 到GitHub账户</li><li>将<code>username.github.io</code> 仓库下的blog新分支克隆到本地</li><li>切换到<code>username.github.io</code>目录下，执行以下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><blockquote><p> 如果执行命令提示错误：<strong>npm: command not found</strong> 则需要安装nodejs环境</p><p>nodejs安装 （windows下）</p><p>进入  <a href="https://nodejs.org/en" target="_blank" rel="noopener">nodejs 官网</a> 下载nodejs 进行安装，安装完成后运行 <code>node -v</code> 检查是否安装成功 </p></blockquote><ul><li>使用npm命令安装hexo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h4 id="4-至此，便可以在新电脑中对博客进行更新和维护操作了"><a href="#4-至此，便可以在新电脑中对博客进行更新和维护操作了" class="headerlink" title="4. 至此，便可以在新电脑中对博客进行更新和维护操作了"></a>4. 至此，便可以在新电脑中对博客进行更新和维护操作了</h4><ul><li>使用 Typera 工具编辑文章</li><li>依次执行 <code>git add .</code>、<code>git commit -m &quot;back to manual blog&quot;</code>、<code>git push</code> 命令</li><li>最后依次执行 <code>hexo clean</code>、 <code>hexo d -g</code> 指令完成博客的部署和发布，此时可以发现，对博客的修改已经同步更新到了master分支，并且两个分支互不干扰。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前言：之前借助hexo模板搭建了blog，而最近因工作需要，换了新的电脑，才发现使用hexo维护博客极其不方便。想提交博客却只能在下班后在家中电脑上操作，这让我倍感8小时work time的效率出了问题。因为，我觉得，&lt;strong&gt;生活嘛，一定需
      
    
    </summary>
    
      <category term="Geek" scheme="http://yoursite.com/categories/Geek/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>GoF浅析</title>
    <link href="http://yoursite.com/2017/10/13/GoF%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2017/10/13/GoF浅析/</id>
    <published>2017-10-12T16:00:00.000Z</published>
    <updated>2018-08-01T07:44:12.735Z</updated>
    
    <content type="html"><![CDATA[<p>GOF设计模式是一座隐性的”桥”<br>因为很多人没有注意到这点，学完Java基础语言就直接去学J2EE,有的甚至鸭子赶架，直接使用起Weblogic等具体J2EE软件，一段时间下来，发现不过如此，挺简单好用，但是你真正理解J2EE了吗？你在具体案例中的应用是否也是在延伸J2EE的思想？<br>如果你不能很好的延伸J2EE的思想，那你岂非是大炮轰蚊子，认识到J2EE不是适合所有场合的人至少是明智的，但我们更需要将J2EE用对地方，那么只有理解J2EE此类框架软件的精髓，那么你才能真正灵活应用Java解决你的问题，甚至构架出你自己企业的框架来。(我们不能总是使用别人设定好的框架，为什么不能有我们自己的框架？)<br>因此，首先你必须掌握GoF的设计模式。虽然它是隐性，但不是可以越过的。<br>关于23种设计模式的有趣见解<br>作者以轻松的语言比喻了java的23种模式，有很好的启发作用。<br>创建型模式 </p><p>1、FACTORY—追MM少不了请吃饭了，麦当劳的鸡翅和肯德基的鸡翅都是MM爱吃的东西，虽然口味有所不同，但不管你带MM去麦当劳或肯德基，只管向服务员说“来四个鸡翅”就行了。麦当劳和肯德基就是生产鸡翅的Factory </p><p>工厂模式：客户类和工厂类分开。消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。缺点是当产品修改时，工厂类也要做相应的修改。如：如何创建及如何向客户端提供。 </p><p>2、BUILDER—MM最爱听的就是“我爱你”这句话了，见到不同地方的MM,要能够用她们的方言跟她说这句话哦，我有一个多种语言翻译机，上面每种语言都有一个按键，见到MM我只要按对应的键，它就能够用相应的语言说出“我爱你”这句话了，国外的MM也可以轻松搞掂，这就是我的“我爱你”builder。（这一定比美军在伊拉克用的翻译机好卖） </p><p>建造模式：将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客户不必知道产品内部组成的细节。建造模式可以强制实行一种分步骤进行的建造过程。 </p><p>3、FACTORY METHOD—请MM去麦当劳吃汉堡，不同的MM有不同的口味，要每个都记住是一件烦人的事情，我一般采用Factory Method模式，带着MM到服务员那儿，说“要一个汉堡”，具体要什么样的汉堡呢，让MM直接跟服务员说就行了。 </p><p>工厂方法模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。 </p><p>4、PROTOTYPE—跟MM用QQ聊天，一定要说些深情的话语了，我搜集了好多肉麻的情话，需要时只要copy出来放到QQ里面就行了，这就是我的情话prototype了。（100块钱一份，你要不要） </p><p>原始模型模式：通过给出一个原型对象来指明所要创建的对象的类型，然后用复制这个原型对象的方法创建出更多同类型的对象。原始模型模式允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。 </p><p>5、SINGLETON—俺有6个漂亮的老婆，她们的老公都是我，我就是我们家里的老公Sigleton，她们只要说道“老公”，都是指的同一个人，那就是我(刚才做了个梦啦，哪有这么好的事) </p><p>单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的“单一实例”的需求时才可使用。 </p><p>结构型模式 </p><p>6、ADAPTER—在朋友聚会上碰到了一个美女Sarah，从香港来的，可我不会说粤语，她不会说普通话，只好求助于我的朋友kent了，他作为我和Sarah之间的Adapter，让我和Sarah可以相互交谈了(也不知道他会不会耍我) </p><p>适配器（变压器）模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。 </p><p>7、BRIDGE—早上碰到MM，要说早上好，晚上碰到MM，要说晚上好；碰到MM穿了件新衣服，要说你的衣服好漂亮哦，碰到MM新做的发型，要说你的头发好漂亮哦。不要问我“早上碰到MM新做了个发型怎么说”这种问题，自己用BRIDGE组合一下不就行了 </p><p>桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化和实现化之间使用组合/聚合关系而不是继承关系，从而使两者可以独立的变化。 </p><p>8、COMPOSITE—Mary今天过生日。“我过生日，你要送我一件礼物。”“嗯，好吧，去商店，你自己挑。”“这件T恤挺漂亮，买，这条裙子好看，买，这个包也不错，买。”“喂，买了三件了呀，我只答应送一件礼物的哦。”“什么呀，T恤加裙子加包包，正好配成一套呀，小姐，麻烦你包起来。”“……”，MM都会用Composite模式了，你会了没有？ </p><p>合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。 </p><p>9、DECORATOR—Mary过完轮到Sarly过生日，还是不要叫她自己挑了，不然这个月伙食费肯定玩完，拿出我去年在华山顶上照的照片，在背面写上“最好的的礼物，就是爱你的Fita”，再到街上礼品店买了个像框（卖礼品的MM也很漂亮哦），再找隔壁搞美术设计的Mike设计了一个漂亮的盒子装起来……，我们都是Decorator，最终都在修饰我这个人呀，怎么样，看懂了吗？</p><p>装饰模式：装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。 </p><p>10、FACADE—我有一个专业的Nikon相机，我就喜欢自己手动调光圈、快门，这样照出来的照片才专业，但MM可不懂这些，教了半天也不会。幸好相机有Facade设计模式，把相机调整到自动档，只要对准目标按快门就行了，一切由相机自动调整，这样MM也可以用这个相机给我拍张照片了。 </p><p>门面模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个门面类。 </p><p>11、flyweight—每天跟MM发短信，手指都累死了，最近买了个新手机，可以把一些常用的句子存在手机里，要用的时候，直接拿出来，在前面加上MM的名字就可以发送了，再不用一个字一个字敲了。共享的句子就是Flyweight，MM的名字就是提取出来的外部特征，根据上下文情况使用。 </p><p>享元模式：FLYWEIGHT在拳击比赛中指最轻量级。享元模式以共享的方式高效的支持大量的细粒度对象。享元模式能做到共享的关键是区分内蕴状态和外蕴状态。内蕴状态存储在享元内部，不会随环境的改变而有所不同。外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。 </p><p>12、PROXY—跟MM在网上聊天，一开头总是“hi,你好”,“你从哪儿来呀？”“你多大了？”“身高多少呀？”这些话，真烦人，写个程序做为我的Proxy吧，凡是接收到这些话都设置好了自动的回答，接收到其他的话时再通知我回答，怎么样，酷吧。 </p><p>代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用。代理就是一个人或一个机构代表另一个人或者一个机构采取行动。某些情况下，客户不想或者不能够直接引用一个对象，代理对象可以在客户和目标对象直接起到中介的作用。客户端分辨不出代理主题对象与真实主题对象。代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。 </p><p>行为模式 </p><p>13、CHAIN OF RESPONSIBLEITY—晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的MM哎，找张纸条，写上“Hi,可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的MM把纸条传给老师了，听说是个老处女呀，快跑! </p><p>责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接 </p><p>起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态的重新组织链和分配责任。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。 </p><p>14、COMMAND—俺有一个MM家里管得特别严，没法见面，只好借助于她弟弟在我们俩之间传送信息，她对我有什么指示，就写一张纸条让她弟弟带给我。这不，她弟弟又传送过来一个COMMAND，为了感谢他，我请他吃了碗杂酱面，哪知道他说：“我同时给我姐姐三个男朋友送COMMAND，就数你最小气，才请我吃面。”，:-( </p><p>命令模式：命令模式把一个请求或者操作封装到一个对象中。命令模式把发出命令的责任和执行命令的责任分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。系统支持命令的撤消。 </p><p>15、INTERPRETER—俺有一个《泡MM真经》，上面有各种泡MM的攻略，比如说去吃西餐的步骤、去看电影的方法等等，跟MM约会时，只要做一个Interpreter，照着上面的脚本执行就可以了。 </p><p>解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。解释器模式将描述怎样在有了一个简单的文法后，使用模式设计解释这些语句。在解释器模式里面提到的语言是指任何解释器对象能够解释的任何组合。在解释器模式中需要定义一个代表文法的命令类的等级结构，也就是一系列的组合规则。每一个命令对象都有一个解释方法，代表对命令对象的解释。命令对象的等级结构中的对象的任何排列组合都是一个语言。 </p><p>16、ITERATOR—我爱上了Mary，不顾一切的向她求婚。 </p><p>Mary：“想要我跟你结婚，得答应我的条件” </p><p>我：“什么条件我都答应，你说吧” </p><p>Mary：“我看上了那个一克拉的钻石” </p><p>我：“我买，我买，还有吗？” </p><p>Mary：“我看上了湖边的那栋别墅” </p><p>我：“我买，我买，还有吗？” </p><p>Mary：“你的小弟弟必须要有50cm长” </p><p>我脑袋嗡的一声，坐在椅子上，一咬牙：“我剪，我剪，还有吗？” </p><p>…… </p><p>迭代子模式：迭代子模式可以顺序访问一个聚集中的元素而不必暴露聚集的内部表象。多个对象聚在一起形成的总体称之为聚集，聚集对象是能够包容一组对象的容器对象。迭代子模式将迭代逻辑封装到一个独立的子对象中，从而与聚集本身隔开。迭代子模式简化了聚集的界面。每一个聚集对象都可以有一个或一个以上的迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。迭代算法可以独立于聚集角色变化。 </p><p>17、MEDIATOR—四个MM打麻将，相互之间谁应该给谁多少钱算不清楚了，幸亏当时我在旁边，按照各自的筹码数算钱，赚了钱的从我这里拿，赔了钱的也付给我，一切就OK啦，俺得到了四个MM的电话。 </p><p>调停者模式：调停者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散偶合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。调停者模式将多对多的相互作用转化为一对多的相互作用。调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。 </p><p>18、MEMENTO—同时跟几个MM聊天时，一定要记清楚刚才跟MM说了些什么话，不然MM发现了会不高兴的哦，幸亏我有个备忘录，刚才与哪个MM说了什么话我都拷贝一份放到备忘录里面保存，这样可以随时察看以前的记录啦。 </p><p>备忘录模式：备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。 </p><p>19、OBSERVER—想知道咱们公司最新MM情报吗？加入公司的MM情报邮件组就行了，tom负责搜集情报，他发现的新情报不用一个一个通知我们，直接发布给邮件组，我们作为订阅者（观察者）就可以及时收到情报啦 </p><p>观察者模式：观察者模式定义了一种一队多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。 </p><p>20、STATE—跟MM交往时，一定要注意她的状态哦，在不同的状态时她的行为会有不同，比如你约她今天晚上去看电影，对你没兴趣的MM就会说“有事情啦”，对你不讨厌但还没喜欢上的MM就会说“好啊，不过可以带上我同事么？”，已经喜欢上你的MM就会说“几点钟？看完电影再去泡吧怎么样？”，当然你看电影过程中表现良好的话，也可以把MM的状态从不讨厌不喜欢变成喜欢哦。 </p><p>状态模式：状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去象是改变了它的类一样。状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。 </p><p>21、STRATEGY—跟不同类型的MM约会，要用不同的策略，有的请电影比较好，有的则去吃小吃效果不错，有的去海边浪漫最合适，单目的都是为了得到MM的芳心，我的追MM锦囊中有好多Strategy哦。 </p><p>策略模式：策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。策略模式把行为和环境分开。环境类负责维持和查询行为类，各种算法在具体的策略类中提供。由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。 </p><p>22、TEMPLATE METHOD——看过《如何说服女生上床》这部经典文章吗？女生从认识到上床的不变的步骤分为巧遇、打破僵局、展开追求、接吻、前戏、动手、爱抚、进去八大步骤(Template method)，但每个步骤针对不同的情况，都有不一样的做法，这就要看你随机应变啦(具体实现)； </p><p>模板方法模式：模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。 </p><p>23、VISITOR—情人节到了，要给每个MM送一束鲜花和一张卡片，可是每个MM送的花都要针对她个人的特点，每张卡片也要根据个人的特点来挑，我一个人哪搞得清楚，还是找花店老板和礼品店老板做一下Visitor，让花店老板根据MM的特点选一束花，让礼品店老板也根据每个人特点选一张卡，这样就轻松多了； </p><p>访问者模式：访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。访问者模式使得增加新的操作变的很容易，就是增加一个新的访问者类。访问者模式将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。当使用访问者模式时，要将尽可能多的对象浏览逻辑放在访问者类中，而不是放到它的子类中。访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GOF设计模式是一座隐性的”桥”&lt;br&gt;因为很多人没有注意到这点，学完Java基础语言就直接去学J2EE,有的甚至鸭子赶架，直接使用起Weblogic等具体J2EE软件，一段时间下来，发现不过如此，挺简单好用，但是你真正理解J2EE了吗？你在具体案例中的应用是否也是在延伸J
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="gof" scheme="http://yoursite.com/tags/gof/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>D1,SAINT2</title>
    <link href="http://yoursite.com/2017/08/08/D1,SAINT2/"/>
    <id>http://yoursite.com/2017/08/08/D1,SAINT2/</id>
    <published>2017-08-08T10:55:27.000Z</published>
    <updated>2018-07-31T13:16:24.408Z</updated>
    
    <content type="html"><![CDATA[<p>###D1,SAINT2</p><blockquote><p>Intern Brief Introduction: [<strong>Delphi_E&amp;S</strong> | <strong>S.E.</strong> | <strong>150/Day</strong>]</p></blockquote><hr><p>其实,day1 in first week 应该都差不多,熟悉一下环境,领一下设备工具,然后就是坐下来,修身养性的reading 一些documents.并且感觉这么优雅的事情我可以持续做一周(实际也确实做了一周).</p><p>#####必备的Tools</p><ul><li><a href="https://baike.baidu.com/item/Lync/1793288?fr=aladdin" target="_blank" rel="noopener">lync</a>:即时通信</li><li><a href="https://outlook.live.com/owa/" target="_blank" rel="noopener">outlook</a>: 邮件通讯</li><li><a href="https://delphi.service-now.com/SelfServicePortal/" target="_blank" rel="noopener">desk service</a>:技术服务平台(上外网就找它)</li></ul><p>#####实在没事做<br>这part我实在没法讲,实习生好用不好用,用过才知道.大概都是抱着此样心态.我被两个陌生男子骚扰了….<br><em>场景一：</em></p><blockquote><p>Person A: 你是新来的实习生吧？</p><blockquote><p>Intern: 是的。</p><blockquote><p>Person A: 帮我寄一下快递，钱我回头给你。</p></blockquote></blockquote></blockquote><p><em>场景二：</em></p><blockquote><p>Person B(PM): 你们组新来的实习生是哪个？</p><blockquote><p>Person C : 这个。</p><blockquote><p>Person B(PM):  今天Person X 没来，你帮我去把这份文件盖章，具体流程电联Person X，你知道电话的吧。。。</p></blockquote></blockquote></blockquote><p>#####D1，Ending<br>对，没错，实习生阳光快乐的一天就这样匆匆过去了。白驹过隙，时光荏苒，光阴似箭，日月如梭。是的，时光易逝，岁月易老，且行且珍惜。</p><p>#####PS</p><pre><code>1. 地铁口出来，下雨了，没带伞。2. 呈上，雨不停，淋雨行，迟到。3. 领laptop，发错，重领。4. tel 顺风快递，1小时后，没来。。5. 再呈上，再tel，来了，光荣加班成功。6. 我加班，我骄傲，我是荣耀实习生。（不然还能怎样，还要我怎样~~）</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###D1,SAINT2&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Intern Brief Introduction: [&lt;strong&gt;Delphi_E&amp;amp;S&lt;/strong&gt; | &lt;strong&gt;S.E.&lt;/strong&gt; | &lt;strong&gt;150/Day&lt;/s
      
    
    </summary>
    
      <category term="Intern" scheme="http://yoursite.com/categories/Intern/"/>
    
    
      <category term="Intern" scheme="http://yoursite.com/tags/Intern/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://yoursite.com/2017/07/18/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/18/策略模式/</id>
    <published>2017-07-18T08:04:48.000Z</published>
    <updated>2018-07-31T13:16:24.409Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="http://yoursite.com/2017/07/18/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/18/简单工厂模式/</id>
    <published>2017-07-18T07:55:27.000Z</published>
    <updated>2018-07-31T13:16:24.410Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="复用与复刻" scheme="http://yoursite.com/tags/%E5%A4%8D%E7%94%A8%E4%B8%8E%E5%A4%8D%E5%88%BB/"/>
    
      <category term="耦合" scheme="http://yoursite.com/tags/%E8%80%A6%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>生活不是林黛玉，并非越忧伤越美丽</title>
    <link href="http://yoursite.com/2017/03/29/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%98%AF%E6%9E%97%E9%BB%9B%E7%8E%89%EF%BC%8C%E5%B9%B6%E9%9D%9E%E8%B6%8A%E5%BF%A7%E4%BC%A4%E8%B6%8A%E7%BE%8E%E4%B8%BD/"/>
    <id>http://yoursite.com/2017/03/29/生活不是林黛玉，并非越忧伤越美丽/</id>
    <published>2017-03-29T14:15:13.000Z</published>
    <updated>2018-07-31T13:16:24.409Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="说说" scheme="http://yoursite.com/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
      <category term="giggle" scheme="http://yoursite.com/tags/giggle/"/>
    
      <category term="pop" scheme="http://yoursite.com/tags/pop/"/>
    
  </entry>
  
</feed>
